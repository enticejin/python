'''
3.1.1. 数字
解释器就像一个简单的计算器一样：你可以在里面输入一个表达式然后它会写出答案。 表达式的语法很直接：运算符 +、-、*、/ 的用法和其他大部分语言一样（
比如 Pascal 或者 C 语言）；括号 (()) 用来分组。
+，-，*，/，%
**表示乘方
未定义变量异常NameError: name 'n' is not defined
'''
print(2+2) #加法运算
print(2-3) #减法运算
print(2 ** 3) #乘方运算
#Python中提供浮点数的完整支持；包含多种混合类型运算数的运算会把整数转换为浮点数:
print(4*3.75-1)
#字符串
#除了数字，Python 也可以操作字符串。字符串有多种形式，可以使用单引号（'……'）
# ，双引号（"……"）都可以获得同样的结果 2。反斜杠 \ 可以用来转义:
print('"Isn\'t," they said.')
#你不希望前置了 \ 的字符转义成特殊字符，可以使用 原始字符串 方式，在引号前添加 r 即可:
print(r'C:\some\name')  # note the r before the quote
'''
脚注

1

    因为 ** 比 - 有更高的优先级, 所以 -3**2 会被解释成 -(3**2) ，因此结果是 -9. 为了避免这个并且得到结果 9,
     你可以用这个式子 (-3)**2.
2

    和其他语言不一样的是, 特殊字符比如说 \n 在单引号 ('...') 和双引号 ("...") 里有一样的意义. 
    这两种引号唯一的区别是，你不需要在单引号里转义双引号 " (但是你必须把单引号转义成 \') ， 反之亦然.

'''